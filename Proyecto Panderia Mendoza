MAIN PANADERIAMENDOZA
package panaderiamendoza;

public class PanaderiaMendoza {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        Controlador controlador = new Controlador();
        controlador.iniciar();
    }
    
}

CLASE CLIENTE
public class Cliente {
    private String nombre;
    private String dni;
    private String localidad;
    private String telefono;
    private String correo;

    public Cliente(String nombre, String dni, String localidad, String telefono, String correo) {
        this.nombre = nombre;
        this.setDni(dni);
        this.localidad = localidad;
        this.telefono = telefono;
        this.correo = correo;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getDni() {
        return dni;
    }

    public void setDni(String dni) {
        if (dni.length() == 8 && dni.matches("\\d+")) {
            this.dni = dni;
        } else {
            throw new IllegalArgumentException("El DNI debe tener exactamente 8 dígitos numéricos.");
        }
    }

    public String getLocalidad() {
        return localidad;
    }

    public void setLocalidad(String localidad) {
        this.localidad = localidad;
    }

    public String getTelefono() {
        return telefono;
    }

    public void setTelefono(String telefono) {
        this.telefono = telefono;
    }

    public String getCorreo() {
        return correo;
    }

    public void setCorreo(String correo) {
        this.correo = correo;
    }

    public void verDatos() {
        System.out.println("----- CLIENTE -----");
        System.out.println("Nombre: " + nombre);
        System.out.println("DNI: " + dni);
        System.out.println("Localidad: " + localidad);
        System.out.println("Telefono: " + telefono);
        System.out.println("Correo: " + correo);
        System.out.println("-------------------");
    }
}

CLASE PRODUCTO
public class Producto {
    private String nombre;
    private double precio;
    private int stock;
    private String categoria;
    private String descripcion;

    public Producto(String nombre, double precio, int stock, String categoria, String descripcion) {
        this.setNombre(nombre);
        this.setPrecio(precio);
        this.setStock(stock);
        this.categoria = categoria;
        this.descripcion = descripcion;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        if (!nombre.isEmpty()) {
            this.nombre = nombre;
        } else {
            throw new IllegalArgumentException("El nombre del producto no puede estar vacío.");
        }
    }

    public double getPrecio() {
        return precio;
    }

    public void setPrecio(double precio) {
        if (precio > 0) {
            this.precio = precio;
        } else {
            throw new IllegalArgumentException("El precio debe ser mayor a 0.");
        }
    }

    public int getStock() {
        return stock;
    }

    public void setStock(int stock) {
        if (stock >= 0) {
            this.stock = stock;
        } else {
            throw new IllegalArgumentException("El stock no puede ser negativo.");
        }
    }

    public String getCategoria() {
        return categoria;
    }

    public void setCategoria(String categoria) {
        this.categoria = categoria;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public void verDatos() {
        System.out.println("----- PRODUCTO -----");
        System.out.println("Nombre: " + nombre);
        System.out.println("Precio: S/ " + precio);
        System.out.println("Stock: " + stock);
        System.out.println("Categoria: " + categoria);
        System.out.println("Descripcion: " + descripcion);
        System.out.println("--------------------");
    }    
}

CLASE VENTA
import java.util.ArrayList;

public class Venta {
    private Cliente cliente;
    ArrayList<Producto> productos;
    private double total;

    public Venta(Cliente cliente) {
        this.cliente = cliente;
        this.productos = new ArrayList<>();
        this.total = 0.0;
    }

    public void agregarProducto(Producto producto, int cantidad) {
        if (producto.getStock() >= cantidad) {
            Producto copia = new Producto(
                producto.getNombre(),
                producto.getPrecio(),
                cantidad,
                producto.getCategoria(),
                producto.getDescripcion()
            );
            productos.add(copia);
            producto.setStock(producto.getStock() - cantidad);
            total += copia.getPrecio() * cantidad;
        } else {
            System.out.println("Stock insuficiente para el producto: " + producto.getNombre());
        }
    }

    public void calcularTotal() {
        total = 0;
        for (Producto p : productos) {
            total += p.getPrecio() * p.getStock();
        }
    }

    public double getTotal() {
        return total;
    }

    public Cliente getCliente() {
        return cliente;
    }

    public void verDatos() {
        System.out.println("----- BOLETA DE VENTA -----");
        System.out.println("Cliente: " + cliente.getNombre() + " - DNI: " + cliente.getDni());
        for (Producto p : productos) {
            System.out.println("- " + p.getNombre() + " x" + p.getStock() + " = S/ " + (p.getPrecio() * p.getStock()));
        }
        System.out.println("Total: S/ " + total);
        System.out.println("---------------------------");
    }    
}

CLASE CONTROLADOR
import java.util.Scanner;


public class Controlador {
    private SistemaPanaderia sistema;
    private Scanner scanner;

    public Controlador() {
        sistema = new SistemaPanaderia();
        scanner = new Scanner(System.in);
        sistema.cargarClientesDesdeArchivo();
        sistema.cargarProductosDesdeArchivo();
    }

    public void iniciar() {
        int opcion;
        do {
            System.out.println("\n---- MENU PANADERIA MENDOZA ----");
            System.out.println("1. Registrar cliente");
            System.out.println("2. Registrar producto");
            System.out.println("3. Mostrar clientes");
            System.out.println("4. Mostrar productos");
            System.out.println("5. Realizar venta");
            System.out.println("6. Mostrar boletas");
            System.out.println("0. Salir");
            System.out.print("Seleccione una opcion: ");
            opcion = scanner.nextInt();
            scanner.nextLine(); // Limpiar buffer

            switch (opcion) {
                case 1 -> registrarCliente();
                case 2 -> registrarProducto();
                case 3 -> sistema.mostrarClientes();
                case 4 -> sistema.mostrarProductos();
                case 5 -> realizarVenta();
                case 6 -> sistema.mostrarBoletas();
                case 0 -> System.out.println("Saliendo del sistema...");
                default -> System.out.println("Opción inválida.");
            }
        } while (opcion != 0);

        sistema.guardarClientesEnArchivo();
        sistema.guardarProductosEnArchivo();
    }

    private void registrarCliente() {
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("DNI: ");
        String dni = scanner.nextLine();
        System.out.print("Localidad: ");
        String localidad = scanner.nextLine();
        System.out.print("Telefono: ");
        String telefono = scanner.nextLine();
        System.out.print("Correo: ");
        String correo = scanner.nextLine();

        try {
            Cliente c = new Cliente(nombre, dni, localidad, telefono, correo);
            sistema.agregarCliente(c);
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void registrarProducto() {
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Precio: ");
        double precio = scanner.nextDouble();
        System.out.print("Stock: ");
        int stock = scanner.nextInt();
        scanner.nextLine(); // limpiar buffer
        System.out.print("Categoria: ");
        String categoria = scanner.nextLine();
        System.out.print("Descripcion: ");
        String descripcion = scanner.nextLine();

        try {
            Producto p = new Producto(nombre, precio, stock, categoria, descripcion);
            sistema.registrarProducto(p);
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void realizarVenta() {
        if (sistema.getClientes().isEmpty() || sistema.getProductos().isEmpty()) {
            System.out.println("Debe haber al menos un cliente y un producto.");
            return;
        }

        System.out.println("Seleccione cliente por indice:");
        for (int i = 0; i < sistema.getClientes().size(); i++) {
            System.out.println(i + ". " + sistema.getClientes().get(i).getNombre());
        }
        int idxCliente = scanner.nextInt();
        Cliente cliente = sistema.getClientes().get(idxCliente);

        Venta venta = new Venta(cliente);

        boolean seguir = true;
        while (seguir) {
            System.out.println("Seleccione producto por índice:");
            for (int i = 0; i < sistema.getProductos().size(); i++) {
                System.out.println(i + ". " + sistema.getProductos().get(i).getNombre());
            }
            int idxProducto = scanner.nextInt();
            Producto producto = sistema.getProductos().get(idxProducto);

            System.out.print("Cantidad: ");
            int cantidad = scanner.nextInt();

            venta.agregarProducto(producto, cantidad);

            System.out.print("¿Agregar otro producto? (s/n): ");
            scanner.nextLine(); // limpiar buffer
            String resp = scanner.nextLine();
            seguir = resp.equalsIgnoreCase("s");
        }

        venta.calcularTotal();
        venta.verDatos();
        sistema.realizarVenta(venta);
    }
}

CLASE SISTEMAPANADERIA

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;


public class SistemaPanaderia {
    private ArrayList<Cliente> clientes;
    private ArrayList<Producto> productos;
    private ArrayList<Venta> ventas;

    public SistemaPanaderia() {
        clientes = new ArrayList<>();
        productos = new ArrayList<>();
        ventas = new ArrayList<>();
    }

    // ---- CLIENTES ----
    public void agregarCliente(Cliente c) {
        for (Cliente cliente : clientes) {
            if (cliente.getDni().equals(c.getDni())) {
                System.out.println("El cliente con DNI ya existe.");
                return;
            }
        }
        clientes.add(c);
    }

    public void mostrarClientes() {
        for (Cliente c : clientes) {
            c.verDatos();
        }
    }

    public void guardarClientesEnArchivo() {
        try (PrintWriter pw = new PrintWriter(new FileWriter("clientes.txt"))) {
            for (Cliente c : clientes) {
                pw.println(c.getDni() + "," + c.getNombre() + "," + c.getLocalidad() + "," + c.getTelefono() + "," + c.getCorreo());
            }
        } catch (IOException e) {
            System.out.println("Error al guardar clientes: " + e.getMessage());
        }
    }

    public void cargarClientesDesdeArchivo() {
        clientes.clear();
        try (BufferedReader br = new BufferedReader(new FileReader("clientes.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 5) {
                    Cliente c = new Cliente(datos[1], datos[0], datos[2], datos[3], datos[4]);
                    clientes.add(c);
                }
            }
        } catch (IOException e) {
            System.out.println("No se pudo cargar clientes: " + e.getMessage());
        }
    }

    // ---- PRODUCTOS ----
    public void registrarProducto(Producto p) {
        for (Producto prod : productos) {
            if (prod.getNombre().equalsIgnoreCase(p.getNombre())) {
                System.out.println("El producto ya existe.");
                return;
            }
        }
        productos.add(p);
    }

    public void mostrarProductos() {
        for (Producto p : productos) {
            p.verDatos();
        }
    }

    public void guardarProductosEnArchivo() {
        try (PrintWriter pw = new PrintWriter(new FileWriter("productos.txt"))) {
            for (Producto p : productos) {
                pw.println(p.getNombre() + "," + p.getPrecio() + "," + p.getStock() + "," + p.getCategoria() + "," + p.getDescripcion());
            }
        } catch (IOException e) {
            System.out.println("Error al guardar productos: " + e.getMessage());
        }
    }

    public void cargarProductosDesdeArchivo() {
        productos.clear();
        try (BufferedReader br = new BufferedReader(new FileReader("productos.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length == 5) {
                    Producto p = new Producto(datos[0], Double.parseDouble(datos[1]), Integer.parseInt(datos[2]), datos[3], datos[4]);
                    productos.add(p);
                }
            }
        } catch (IOException e) {
            System.out.println("No se pudo cargar productos: " + e.getMessage());
        }
    }

    // ---- VENTAS ----
    public void realizarVenta(Venta venta) {
        ventas.add(venta);
        guardarVentasEnArchivo();
    }

    public void mostrarBoletas() {
        for (Venta v : ventas) {
            v.verDatos();
        }
    }

    public void guardarVentasEnArchivo() {
        try (PrintWriter pw = new PrintWriter(new FileWriter("ventas.txt", true))) {
            for (Venta v : ventas) {
                pw.println("CLIENTE: " + v.getCliente().getNombre() + " - DNI: " + v.getCliente().getDni());
                for (Producto p : v.productos) {
                    pw.println("  " + p.getNombre() + " x" + p.getStock() + " = S/ " + (p.getPrecio() * p.getStock()));
                }
                pw.println("TOTAL: S/ " + v.getTotal());
                pw.println("-----");
            }
        } catch (IOException e) {
            System.out.println("Error al guardar ventas: " + e.getMessage());
        }
    }

    // Getters para uso desde el menú
    public ArrayList<Cliente> getClientes() {
        return clientes;
    }

    public ArrayList<Producto> getProductos() {
        return productos;
    }
}
